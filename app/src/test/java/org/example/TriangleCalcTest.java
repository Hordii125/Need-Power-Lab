/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

class TriangleCalcTest {
    
    @Test

    void testTriangleNumberCalculator() {
        TriangleNumberCalculator calculator = new TriangleNumberCalculator();

        // Test value method
        assertEquals(1, calculator.value(1));
        assertEquals(3, calculator.value(2));
        assertEquals(6, calculator.value(3));
        assertEquals(10, calculator.value(4));
        assertEquals(15, calculator.value(5));

        // Test add method
        assertEquals(4, calculator.add(1, 2)); // 1 + 3
        assertEquals(9, calculator.add(2, 3)); // 3 + 6
        assertEquals(25, calculator.add(4, 5)); // 10 + 15

        // Test subtract method
        assertEquals(-5, calculator.subtract(1, 3)); // 1 - 6
        assertEquals(-12, calculator.subtract(2, 5)); // 3 - 15
        assertEquals(-35, calculator.subtract(4, 9)); // 10 - 45
    }

    @Test
    void testTriangleNumberCalculatorLargeNumbers() {
        TriangleNumberCalculator calculator = new TriangleNumberCalculator();

        // Test large numbers
        assertEquals(5050, calculator.value(100)); // 100th triangular number
        assertEquals(5050 + 5050, calculator.add(100, 100)); // 100th + 100th
        assertEquals(5050 - 4950, calculator.subtract(100, 99)); // 100th - 99th
    }

    @Test
    void testTriangleNumberCalculatorNegativeNumbers() {
        TriangleNumberCalculator calculator = new TriangleNumberCalculator();

        // Test negative numbers
        assertEquals(0, calculator.value(0)); // 0th triangular number
        assertEquals(0, calculator.add(0, 0)); // 0 + 0
        assertEquals(0, calculator.subtract(0, 0)); // 0 - 0

        // Negative inputs should not be valid for triangular numbers
        assertEquals(-1, calculator.value(-1));
    }

    @Test
    void testTriangleNumberCalculatorEdgeCases() {
        TriangleNumberCalculator calculator = new TriangleNumberCalculator();

        // Edge cases
        assertEquals(0, calculator.value(0)); // 0th triangular number
        assertEquals(1, calculator.value(1)); // 1st triangular number
        assertEquals(3, calculator.value(2)); // 2nd triangular number

        // Adding and subtracting edge cases
        assertEquals(1, calculator.add(0, 1)); // 0 + 1
        assertEquals(-1, calculator.subtract(0, 1)); // 0 - 1
    }

    @Test
    void testTriangleNumberCalculatorInvalidInputs() {
        TriangleNumberCalculator calculator = new TriangleNumberCalculator();

        // Invalid inputs should not be valid for triangular numbers
        assertEquals(-5 , calculator.value(-5));
        assertEquals(2, calculator.add(-1, 2));
        assertEquals(6 ,calculator.subtract(2, -3));
    }

    @Test
    void testTriangleNumberCalculatorMaxValue() {
        TriangleNumberCalculator calculator = new TriangleNumberCalculator();

        // Test maximum value for triangular numbers
        int maxInt = Integer.MAX_VALUE;
        assertThrows(StackOverflowError.class, () -> calculator.value(maxInt));
        assertThrows(StackOverflowError.class, () -> calculator.add(maxInt, 1));
        assertThrows(StackOverflowError.class, () -> calculator.subtract(maxInt, 1));
    }

    @Test
    void findMaxTriangleNumber() {
        TriangleNumberCalculator calculator = new TriangleNumberCalculator();
        
        // Find the maximum triangular number that can be calculated without overflow
        int n = 1;
        while (true) {
            try {
                calculator.value(n);
                n++;
            } catch (StackOverflowError e) {

                n--; // Decrement to get the last valid n
                System.out.println("Stack overflow occurred at n = " + n);
                System.out.println("Maximum triangular number that can be calculated: " + calculator.value(n));
                break; // Stop when we hit a stack overflow
            }
        }
        // The last valid n before overflow
        assertTrue(n > 1); // Ensure we found at least one valid triangular number
    }
}
